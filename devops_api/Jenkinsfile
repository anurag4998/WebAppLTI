pipeline {
    agent any
    stages {
        stage('Build'){ 
            steps {
                sh "git checkout dev"
                sh 'cd devops_api && dotnet restore'
                sh 'cd devops_api && dotnet build'
                sh 'cd devops_api && dotnet publish -o site'
            }
        }
        stage('Build and push docker image'){
            steps{
                sh 'docker logout'
                sh "docker build -t devops_api:${env.BUILD_ID} ./devops_api"
                withCredentials([usernamePassword(credentialsId: 'mydockercredentials', passwordVariable: 'PASSWORD', usernameVariable: 'USER')]) {
                    sh "docker login -u ${USER} --password ${PASSWORD}"
                    sh "docker tag devops_api:${env.BUILD_ID} ${USER}/devops_api:${env.BUILD_ID}"
                    sh "docker push ${USER}/devops_api:${env.BUILD_ID}"
                }
            }
        }   
        stage('Deploy to EB - production'){
            input{
              message 'Do you want to proceed ??'
            }
            steps{
                withAWS(region:'ap-south-1', credentials:'IAMuserLTI') {
                    s3Download bucket: 'elasticbeanstalk-ap-south-1-913313549960', file:'devops_api/dev_builds/'
                }
                step([$class: 'AWSEBDeploymentBuilder',
                    credentialId: 'IAMuserLTI',
                    awsRegion: 'ap-south-1',
                    maxAttempts: 30,
                    applicationName: 'dotnetserverdev',
                    environmentName: 'Dotnetserverdev-env',
                    rootObject: 'devops_api/dev_builds/null/dotnetserverdev-${BUILD_NUMBER}-${BUILD_TAG}.zip',
                    versionLabelFormat: '${BUILD_NUMBER}-${BUILD_TAG}-prod',
                    sleepTime: 90,
                    checkHealth: true
                ])
            }
        }
        stage("Commit changes back to production repo"){
            steps{
                // sh 'git checkout --track origin/dev'
                sh 'git checkout --track origin/master'
                sh 'git pull'
                sh 'git merge dev'
                withCredentials([usernamePassword(credentialsId: 'mygithubcredentials', passwordVariable: 'GIT_PASSWORD', usernameVariable: 'GIT_USERNAME')]) {
                    sh('git push https://${GIT_USERNAME}:${GIT_PASSWORD}@github.com/vineetb95/WebAppLTI' )
                }
            }
        }
    }
    post {
    // Clean after build
        always {
            cleanWs()
        }
    //Do this if the pipeline was aborted
        aborted{
            echo "The pipeline was aborted!!"
        }
    }
}
