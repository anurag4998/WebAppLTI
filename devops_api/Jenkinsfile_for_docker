pipeline {
    agent any
    stages {
            stage('Build'){ 
            steps {
                sh "git checkout dev"
                sh 'cd devops_api && dotnet restore'
                sh 'cd devops_api && dotnet build'
                sh 'cd devops_api && dotnet publish -o Release'
            }
        }
        stage('Build and push docker image'){
            steps{
                sh 'docker logout'
                sh "docker build -t devops_api:${env.BUILD_ID} ./devops_api"
                withCredentials([usernamePassword(credentialsId: 'anuragdockerhub', passwordVariable: 'PASSWORD', usernameVariable: 'USER')]) {
                        sh "docker login -u ${USER} --password ${PASSWORD}"
                        sh "docker tag devops_api:${env.BUILD_ID} ${USER}/devops_api:${env.BUILD_ID}"
                        sh "docker push ${USER}/devops_api:${env.BUILD_ID}"
                }
            }
        }
       stage('Deploy to development'){
        steps{
                script{
                    withCredentials([sshUserPrivateKey(credentialsId: 'jenkinsec2instance', keyFileVariable: 'identity', usernameVariable: 'userName')]) {

                        def remote = [:]
                        remote.name = 'EC2dev'
                        remote.host = 'ec2-15-207-85-52.ap-south-1.compute.amazonaws.com'
                        remote.allowAnyHosts = true
                        remote.user = userName
                        remote.identityFile = identity
                        sshCommand remote: remote, command: "docker pull anurag4998/devops_api:${env.BUILD_ID}"
                        sshCommand remote: remote, command: "docker stop devContainer"
                        sshCommand remote: remote, command: "docker rm devContainer"
                        sshCommand remote: remote, command: "docker create -p 3000:80 --name devContainer anurag4998/devops_api:${env.BUILD_ID}"
                        sshCommand remote: remote, command: "docker start devContainer"

                    }
                }
            }
        }
        
        stage('Deploy to production'){
         input{
              message 'Do you want to proceed ??'
            }
        steps{
        
                script{
                    withCredentials([sshUserPrivateKey(credentialsId: 'jenkinsec2instance', keyFileVariable: 'identity', usernameVariable: 'userName')]) {

                        def remote = [:]
                        remote.name = 'EC2dev'
                        remote.host = 'ec2-15-207-85-52.ap-south-1.compute.amazonaws.com'
                        remote.allowAnyHosts = true
                        remote.user = userName
                        remote.identityFile = identity
                        sshCommand remote: remote, command: "docker pull anurag4998/devops_api:${env.BUILD_ID}"
                        sshCommand remote: remote, command: "docker stop prodContainer"
                        sshCommand remote: remote, command: "docker rm prodContainer"
                        sshCommand remote: remote, command: "docker create -p 5000:80 --name prodContainer anurag4998/devops_api:${env.BUILD_ID}"
                        sshCommand remote: remote, command: "docker start prodContainer"

                    }
                }
            }
        }
       
    }
    post {
    // Clean after build
        always {
            cleanWs()
        }
    //Do this if the pipeline was aborted
        aborted{
            echo "The pipeline was aborted!!"
        }
    }
}
